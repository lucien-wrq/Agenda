<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
// Récupérer les données du formulaire HTML
$lastname = $_POST['lastname'];
$firstname = $_POST['firstname'];
$email = $_POST['email'];
$password = $_POST['password'];
$id_user = uniqid();
// Créer le fichier de configuration pour l'utilisateur
$id_agenda = uniqid();
$type = "perso";
$label = $lastname." ".$firstname;
$description = "";
$creation_date2 = date("Y-m-d H:i:s");
$last_modification_date = null;
$creator_id = $id_user;


$id_role = $_POST['role'];
$id_team = $_POST['group'];

date_default_timezone_set('Europe/Paris');
$creation_date = date('Y-m-d H:i:s');
$last_login_date = date('Y-m-d H:i:s');

// Fonction de validation d'une adresse e-mail
function validateEmail($email) {
    // Utilisation de filter_var avec FILTER_VALIDATE_EMAIL
    return filter_var($email, FILTER_VALIDATE_EMAIL);
}

if (validateEmail($_POST['email'])) {
    $email = $_POST['email'];
} else {
    echo "L'adresse e-mail n'est pas valide.";
    exit();
}

// Hacher le mot de passe
$hashed_password = password_hash($password, PASSWORD_DEFAULT);

// Ouvrir la connexion à la base de données SQLite
try {
    $db = new PDO('sqlite:../BDD2.db');
} catch (PDOException $e) {
    die("Erreur de connexion : " . $e->getMessage());
}

// Préparer la requête SQL
$sql = "INSERT INTO users (id_user, lastname, firstname, email, password, creation_date, last_login_date) VALUES (:id_user, :lastname, :firstname, :email, :password, :creation_date, :last_login_date)";
$sql2 = "INSERT INTO users_has_roles (id_user, id_role) VALUES (:id_user, :id_role)";
$sql3 = "INSERT INTO users_has_teams (id_user, id_team) VALUES (:id_user, :id_team)";
$sql4 = "INSERT INTO agendas (id_agenda, type, label, description, creator_id, creation_date, last_modification_date) VALUES (:id_agenda, :type, :label, :description, :creator_id, :creation_date, :last_modification_date)";
$sql5 = "INSERT INTO users_has_agendas (id_user, id_agenda) VALUES (:id_user, :id_agenda)";

// Préparer la requête SQL avec PDO
$stmt = $db->prepare($sql);
$stmt2 = $db->prepare($sql2);
$stmt3 = $db->prepare($sql3);
$stmt4 = $db->prepare($sql4);
$stmt5 = $db->prepare($sql5);

// Binder les paramètres
$stmt->bindParam(':id_user', $id_user, PDO::PARAM_STR);
$stmt->bindParam(':lastname', $lastname, PDO::PARAM_STR);
$stmt->bindParam(':firstname', $firstname, PDO::PARAM_STR);
$stmt->bindParam(':email', $email, PDO::PARAM_STR);
$stmt->bindParam(':password', $hashed_password, PDO::PARAM_STR);  
$stmt->bindParam(':creation_date', $creation_date, PDO::PARAM_STR);
$stmt->bindParam(':last_login_date', $last_login_date, PDO::PARAM_STR);

$stmt2->bindParam(':id_user', $id_user, PDO::PARAM_STR);
$stmt2->bindParam(':id_role', $id_role, PDO::PARAM_STR);

$stmt3->bindParam(':id_user', $id_user, PDO::PARAM_STR);
$stmt3->bindParam(':id_team', $id_team, PDO::PARAM_STR);

$stmt4->bindParam(':id_agenda', $id_agenda, PDO::PARAM_STR);
$stmt4->bindParam(':label', $label, PDO::PARAM_STR);
$stmt4->bindParam(':description', $description, PDO::PARAM_STR);
$stmt4->bindParam(':creation_date', $creation_date2, PDO::PARAM_STR);
$stmt4->bindParam(':last_modification_date', $last_modification_date, PDO::PARAM_STR);
$stmt4->bindParam(':creator_id', $creator_id, PDO::PARAM_STR);
$stmt4->bindParam(':type', $type, PDO::PARAM_STR);

$stmt5->bindParam(':id_user', $id_user, PDO::PARAM_STR);
$stmt5->bindParam(':id_agenda', $id_agenda, PDO::PARAM_STR);
// Exécuter la requête
if ($stmt->execute()) {
    echo "Enregistrement réussi";

    if ($stmt2->execute() && $stmt3->execute() && $stmt4->execute() && $stmt5->execute()) {
        echo "Associations réussies";
    } else {
        echo "Erreur lors de l'association : " . print_r($db->errorInfo(), true);
    }

} else {
    echo "Erreur : " . print_r($stmt->errorInfo(), true);
}

// Fermer la connexion
$db = null;
print_r($stmt->errorInfo());

?>
